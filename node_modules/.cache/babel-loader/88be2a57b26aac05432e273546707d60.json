{"ast":null,"code":"import _classCallCheck from \"/Users/tjxy/Downloads/transformcontrols-and-makedefault/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/tjxy/Downloads/transformcontrols-and-makedefault/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/tjxy/Downloads/transformcontrols-and-makedefault/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/tjxy/Downloads/transformcontrols-and-makedefault/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MeshStandardMaterial } from 'three';\n\nvar MeshReflectorMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\n\n  var _super = _createSuper(MeshReflectorMaterial);\n\n  function MeshReflectorMaterial() {\n    var _this;\n\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MeshReflectorMaterial);\n\n    _this = _super.call(this, parameters);\n    _this._debug = {\n      value: 0\n    };\n    _this._tDepth = {\n      value: null\n    };\n    _this._distortionMap = {\n      value: null\n    };\n    _this._tDiffuse = {\n      value: null\n    };\n    _this._tDiffuseBlur = {\n      value: null\n    };\n    _this._textureMatrix = {\n      value: null\n    };\n    _this._hasBlur = {\n      value: false\n    };\n    _this._mirror = {\n      value: 0.0\n    };\n    _this._mixBlur = {\n      value: 0.0\n    };\n    _this._blurStrength = {\n      value: 0.5\n    };\n    _this._minDepthThreshold = {\n      value: 0.9\n    };\n    _this._maxDepthThreshold = {\n      value: 1\n    };\n    _this._depthScale = {\n      value: 0\n    };\n    _this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    _this._distortion = {\n      value: 1\n    };\n    _this._mixContrast = {\n      value: 1.0\n    };\n\n    _this.setValues(parameters);\n\n    return _this;\n  }\n\n  _createClass(MeshReflectorMaterial, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      var _shader$defines;\n\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n        shader.defines.USE_UV = '';\n      }\n\n      shader.uniforms.debug = this._debug;\n      shader.uniforms.hasBlur = this._hasBlur;\n      shader.uniforms.tDiffuse = this._tDiffuse;\n      shader.uniforms.tDepth = this._tDepth;\n      shader.uniforms.distortionMap = this._distortionMap;\n      shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n      shader.uniforms.textureMatrix = this._textureMatrix;\n      shader.uniforms.mirror = this._mirror;\n      shader.uniforms.mixBlur = this._mixBlur;\n      shader.uniforms.mixStrength = this._blurStrength;\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n      shader.uniforms.depthScale = this._depthScale;\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n      shader.uniforms.distortion = this._distortion;\n      shader.uniforms.mixContrast = this._mixContrast;\n      shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n      shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDiffuseBlur;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform bool hasBlur;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float mixContrast;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;        \\n        \".concat(shader.fragmentShader);\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float distortionFactor = 0.0;\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      vec4 new_vUv = my_vUv;\\n      new_vUv.x += distortionFactor;\\n      new_vUv.y += distortionFactor;\\n\\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\\n      \\n      vec4 merge = base;\\n      \\n      #ifdef USE_NORMALMAP\\n        vec2 normal_uv = vec2(0.0);\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\\n        vec3 coord = new_vUv.xyz / new_vUv.w;\\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\\n        merge = base_normal;\\n        blur = blur_normal;\\n      #endif\\n\\n      float depthFactor = 0.0001;\\n      float blurFactor = 0.0;\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2DProj(tDepth, new_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor));\\n\\n        #ifdef USE_BLUR\\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\\n          merge = merge * min(1.0, depthFactor + 0.5);\\n        #else\\n          merge = merge * depthFactor;\\n        #endif\\n  \\n      #endif\\n\\n      float reflectorRoughnessFactor = roughness;\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n      \\n      #ifdef USE_BLUR\\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\\n        merge = mix(merge, blur, blurFactor);\\n      #endif\\n\\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\\n\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);           \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n      \\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(blurFactor), 1.0));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2DProj(tDiffuse, new_vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(texture2DProj(tDiffuseBlur, new_vUv));\\n      }\\n      \");\n    }\n  }, {\n    key: \"tDiffuse\",\n    get: function get() {\n      return this._tDiffuse.value;\n    },\n    set: function set(v) {\n      this._tDiffuse.value = v;\n    }\n  }, {\n    key: \"tDepth\",\n    get: function get() {\n      return this._tDepth.value;\n    },\n    set: function set(v) {\n      this._tDepth.value = v;\n    }\n  }, {\n    key: \"distortionMap\",\n    get: function get() {\n      return this._distortionMap.value;\n    },\n    set: function set(v) {\n      this._distortionMap.value = v;\n    }\n  }, {\n    key: \"tDiffuseBlur\",\n    get: function get() {\n      return this._tDiffuseBlur.value;\n    },\n    set: function set(v) {\n      this._tDiffuseBlur.value = v;\n    }\n  }, {\n    key: \"textureMatrix\",\n    get: function get() {\n      return this._textureMatrix.value;\n    },\n    set: function set(v) {\n      this._textureMatrix.value = v;\n    }\n  }, {\n    key: \"hasBlur\",\n    get: function get() {\n      return this._hasBlur.value;\n    },\n    set: function set(v) {\n      this._hasBlur.value = v;\n    }\n  }, {\n    key: \"mirror\",\n    get: function get() {\n      return this._mirror.value;\n    },\n    set: function set(v) {\n      this._mirror.value = v;\n    }\n  }, {\n    key: \"mixBlur\",\n    get: function get() {\n      return this._mixBlur.value;\n    },\n    set: function set(v) {\n      this._mixBlur.value = v;\n    }\n  }, {\n    key: \"mixStrength\",\n    get: function get() {\n      return this._blurStrength.value;\n    },\n    set: function set(v) {\n      this._blurStrength.value = v;\n    }\n  }, {\n    key: \"minDepthThreshold\",\n    get: function get() {\n      return this._minDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._minDepthThreshold.value = v;\n    }\n  }, {\n    key: \"maxDepthThreshold\",\n    get: function get() {\n      return this._maxDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._maxDepthThreshold.value = v;\n    }\n  }, {\n    key: \"depthScale\",\n    get: function get() {\n      return this._depthScale.value;\n    },\n    set: function set(v) {\n      this._depthScale.value = v;\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this._debug.value;\n    },\n    set: function set(v) {\n      this._debug.value = v;\n    }\n  }, {\n    key: \"depthToBlurRatioBias\",\n    get: function get() {\n      return this._depthToBlurRatioBias.value;\n    },\n    set: function set(v) {\n      this._depthToBlurRatioBias.value = v;\n    }\n  }, {\n    key: \"distortion\",\n    get: function get() {\n      return this._distortion.value;\n    },\n    set: function set(v) {\n      this._distortion.value = v;\n    }\n  }, {\n    key: \"mixContrast\",\n    get: function get() {\n      return this._mixContrast.value;\n    },\n    set: function set(v) {\n      this._mixContrast.value = v;\n    }\n  }]);\n\n  return MeshReflectorMaterial;\n}(MeshStandardMaterial);\n\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","MeshReflectorMaterial","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","shader","_shader$defines","defines","USE_UV","uniforms","debug","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","replace","fragmentShader","v"],"sources":["/Users/tjxy/Downloads/transformcontrols-and-makedefault/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;        \n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n      \n      vec4 merge = base;\n      \n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n  \n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n      \n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);           \n      diffuseColor = sRGBToLinear(diffuseColor);\n      \n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(vec4(vec3(blurFactor), 1.0));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2DProj(tDiffuse, new_vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(texture2DProj(tDiffuseBlur, new_vUv));\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}